-- unpacked representation
SELECT '0'::number, pg_column_size('0'::number);
 number | pg_column_size 
--------+----------------
 0      |              4
(1 row)

SELECT '1'::number, pg_column_size('1'::number);
 number | pg_column_size 
--------+----------------
 1      |              5
(1 row)

SELECT '-1'::number, pg_column_size('-1'::number);
 number | pg_column_size 
--------+----------------
 -1     |              5
(1 row)

CREATE TABLE num (
	n1 number,
	n2 number
);
INSERT INTO num
	VALUES (NULL, '0'),
		('-1', '1'),
		('-128', '127'),
		('-129', '128'),
		('-32768', '32767'),
		('-32769', '32768'),
		('-8388608', '8388607'),
		('-8388609', '8388608'),
		('-2147483648', '2147483647'),
		('-2147483649', '2147483648'),
		('-549755813888', '549755813887'),
		('-549755813889', '549755813888'),
		('-140737488355328', '140737488355327'),
		('-140737488355329', '140737488355328'),
		('-36028797018963968', '36028797018963967'),
		('-36028797018963969', '36028797018963968'),
		('-9223372036854775808', '9223372036854775807');
-- packed representation
SELECT n1, n2, pg_column_size(n1), pg_column_size(n2) FROM num;
          n1          |         n2          | pg_column_size | pg_column_size 
----------------------+---------------------+----------------+----------------
                      | 0                   |                |              1
 -1                   | 1                   |              2 |              2
 -128                 | 127                 |              2 |              2
 -129                 | 128                 |              3 |              3
 -32768               | 32767               |              3 |              3
 -32769               | 32768               |              4 |              4
 -8388608             | 8388607             |              4 |              4
 -8388609             | 8388608             |              5 |              5
 -2147483648          | 2147483647          |              5 |              5
 -2147483649          | 2147483648          |              6 |              6
 -549755813888        | 549755813887        |              6 |              6
 -549755813889        | 549755813888        |              7 |              7
 -140737488355328     | 140737488355327     |              7 |              7
 -140737488355329     | 140737488355328     |              8 |              8
 -36028797018963968   | 36028797018963967   |              8 |              8
 -36028797018963969   | 36028797018963968   |              9 |              9
 -9223372036854775808 | 9223372036854775807 |              9 |              9
(17 rows)

-- casts
SELECT number(1); -- explicit call
 number 
--------
 1
(1 row)

SELECT 1::number; -- cast from int
 number 
--------
 1
(1 row)

SELECT 549755813887::number; -- cast from bigint
    number    
--------------
 549755813887
(1 row)

SELECT 1::number + 2::number; -- implicit cast to bigint
 ?column? 
----------
        3
(1 row)

-- test comparisons
WITH
  v(u) AS (VALUES ('-1'::number), ('0'::number), ('1'::number)),
  va(a) AS (SELECT * FROM v),
  vb(b) AS (SELECT * FROM v)
SELECT
  a, b,
  CASE WHEN number_cmp(a, b) < 0 THEN '<'
       WHEN number_cmp(a, b) = 0 THEN '='
       WHEN number_cmp(a, b) > 0 THEN '>'
  END AS cmp,
  a < b  AS lt, a <= b AS le,
  a = b  AS eq, a <> b AS ne,
  a >= b AS ge, a > b  AS gt
FROM
  va CROSS JOIN vb;
 a  | b  | cmp | lt | le | eq | ne | ge | gt 
----+----+-----+----+----+----+----+----+----
 -1 | -1 | =   | f  | t  | t  | f  | t  | f
 -1 | 0  | <   | t  | t  | f  | t  | f  | f
 -1 | 1  | <   | t  | t  | f  | t  | f  | f
 0  | -1 | >   | f  | f  | f  | t  | t  | t
 0  | 0  | =   | f  | t  | t  | f  | t  | f
 0  | 1  | <   | t  | t  | f  | t  | f  | f
 1  | -1 | >   | f  | f  | f  | t  | t  | t
 1  | 0  | >   | f  | f  | f  | t  | t  | t
 1  | 1  | =   | f  | t  | t  | f  | t  | f
(9 rows)

-- test btree index
CREATE TABLE numtab (num number);
INSERT INTO numtab SELECT generate_series(-100000, 100000);
ANALYZE numtab;
CREATE INDEX ON numtab(num);
SELECT * FROM numtab WHERE num = 1000::number;
 num  
------
 1000
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM numtab WHERE num = 1000::number;
                   QUERY PLAN                   
------------------------------------------------
 Index Only Scan using numtab_num_idx on numtab
   Index Cond: (num = '1000'::number)
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM numtab WHERE num = 1000;
            QUERY PLAN            
----------------------------------
 Seq Scan on numtab
   Filter: ((num)::bigint = 1000)
(2 rows)

